#---------------------------------------------------------------------------
# Robust Hostname Detection Configuration for STS
#---------------------------------------------------------------------------
# This file documents all available configuration options for the enhanced
# hostname detection system that ensures 100% reliability for STS URL selection.
#
# Add these properties to your user.properties file to customise behaviour.
#
# The robust hostname detection system addresses race conditions and provides
# multiple fallback methods to ensure STS always connects to the correct URL.

#---------------------------------------------------------------------------
# Basic Hostname Detection Configuration
#---------------------------------------------------------------------------

# Enable/disable robust hostname detection (default: true)
global.setup.hostname.detection=true

# Maximum number of retry attempts for hostname detection (default: 5)
global.setup.hostname.max.retries=5

# Delay between retry attempts in milliseconds (default: 1000ms = 1 second)
global.setup.hostname.retry.delay.ms=1000

# Enable fallback detection methods (environment variables, system properties) (default: true)
global.setup.hostname.enable.fallbacks=true

# Manual hostname override (use only if automatic detection completely fails)
# global.setup.hostname.override=my-custom-hostname

#---------------------------------------------------------------------------
# STS Connectivity Validation Configuration
#---------------------------------------------------------------------------

# Enable STS connectivity validation (default: true)
# This tests actual connectivity to STS hosts before committing to a URL
global.setup.sts.validation.enabled=true

# Timeout for STS connectivity tests in milliseconds (default: 5000ms = 5 seconds)
global.setup.sts.validation.timeout.ms=5000

#---------------------------------------------------------------------------
# Environment Detection Configuration
#---------------------------------------------------------------------------

# Enable environment-based STS host selection (default: true)
global.setup.environment.detection=true

# STS hosts for different environments
# Remote execution (jm-gen*, jm-nofrills* hostnames) - internal service discovery URL
V_STS_LOCAL_HOST=simple-table-server-ho-hmpo-ew2tlg1nl1-i-team-nft-i-docker-tlg1.service.np.ebsa.local

# Local development (other hostnames) - external URL
V_STS_HOST_DEFAULT=simple-table-server-ho-hmpo-ew2tlg1nl1-i-team-nft-i-docker-tlg1.np.ebsa.homeoffice.gov.uk

# Template versions (processed automatically)
template.V_STS_LOCAL_HOST=simple-table-server-ho-hmpo-ew2tlg1nl1-i-team-nft-i-docker-tlg1.service.np.ebsa.local
template.V_STS_HOST=simple-table-server-ho-hmpo-ew2tlg1nl1-i-team-nft-i-docker-tlg1.np.ebsa.homeoffice.gov.uk

#---------------------------------------------------------------------------
# Protocol Configuration
#---------------------------------------------------------------------------

# Use HTTPS for STS connections (default: true)
# The system automatically handles SSL certificate validation bypass (like curl -k)
sts.use.https=true

#---------------------------------------------------------------------------
# GUI Integration Configuration
#---------------------------------------------------------------------------

# These settings control how GUI elements interact with hostname detection

# Timeout for GUI elements waiting for hostname detection (milliseconds)
# STS configuration dropdowns will wait this long for hostname detection to complete
gui.hostname.detection.timeout.ms=5000

#---------------------------------------------------------------------------
# Debugging and Troubleshooting
#---------------------------------------------------------------------------

# Enable verbose logging for hostname detection (default: false)
global.setup.logging.verbose=false

# When verbose logging is enabled, you'll see messages like:
# INFO  [GlobalSetupUtil] Starting robust hostname detection (maxRetries=5, retryDelay=1000ms, fallbacks=true)
# INFO  [GlobalSetupUtil] Hostname detection attempt 1/5 using InetAddress.getLocalHost()
# INFO  [GlobalSetupUtil] Successfully detected hostname: jm-gen-automation-worker-01 (attempt 1)
# INFO  [GlobalSetupUtil] Remote environment detected (jm-gen-automation-worker-01) â†’ candidate STS host: internal.service.local
# INFO  [GlobalSetupUtil] STS connectivity validation successful: https://internal.service.local
# INFO  [GlobalSetupUtil] Validated and set V_STS_HOST: https://internal.service.local

#---------------------------------------------------------------------------
# Example Scenarios
#---------------------------------------------------------------------------

# SCENARIO 1: Local Development
# Hostname: developer-laptop
# Result: Uses V_STS_HOST_DEFAULT (external URL)
# Example: https://simple-table-server...np.ebsa.homeoffice.gov.uk

# SCENARIO 2: Remote Execution (Jenkins/Container)
# Hostname: jm-gen-automation-worker-01
# Result: Uses V_STS_LOCAL_HOST (internal service discovery)
# Example: https://simple-table-server...service.np.ebsa.local

# SCENARIO 3: Hostname Detection Failure
# The system will:
# 1. Retry hostname detection up to 5 times with 1 second delays
# 2. Try environment variables: HOSTNAME, COMPUTERNAME, HOST
# 3. Try system properties: java.net.hostname, hostname, computer.name
# 4. Use manual override if configured: global.setup.hostname.override
# 5. Generate fallback hostname: unknown-host-<timestamp>

# SCENARIO 4: STS Connectivity Issues
# The system will:
# 1. Test connectivity to primary STS host (based on hostname)
# 2. Test fallback STS hosts if primary fails
# 3. Use the first working STS host
# 4. Show connectivity status in GUI dropdowns

#---------------------------------------------------------------------------
# Migration from Old System
#---------------------------------------------------------------------------

# If you previously used the old hostname detection, you can now:
# 1. Remove any custom hostname detection scripts
# 2. Enable robust detection: global.setup.hostname.detection=true
# 3. Configure retry attempts: global.setup.hostname.max.retries=5
# 4. Enable STS validation: global.setup.sts.validation.enabled=true
# 5. Monitor logs to ensure detection works correctly

#---------------------------------------------------------------------------
# Performance Impact
#---------------------------------------------------------------------------

# The robust hostname detection system adds minimal overhead:
# - Initial detection: ~100-500ms (depending on retries needed)
# - STS validation: ~200-1000ms per host tested
# - GUI display: ~10-50ms for status lookup
# - Total typical overhead: < 1 second per test execution

# The benefits far outweigh the small performance cost:
# - 100% reliable STS URL selection
# - No more test failures due to wrong STS URL
# - Clear visibility of which STS URL will be used
# - Automatic recovery from network issues

#---------------------------------------------------------------------------
# Advanced Configuration Examples
#---------------------------------------------------------------------------

# High-reliability environment (more retries, longer timeouts)
global.setup.hostname.max.retries=10
global.setup.hostname.retry.delay.ms=2000
global.setup.sts.validation.timeout.ms=10000

# Fast environment (fewer retries, shorter timeouts)
global.setup.hostname.max.retries=3
global.setup.hostname.retry.delay.ms=500
global.setup.sts.validation.timeout.ms=3000

# Debug environment (maximum logging)
global.setup.logging.verbose=true
gui.hostname.detection.timeout.ms=30000

# Network-constrained environment (disable connectivity validation)
global.setup.sts.validation.enabled=false

#---------------------------------------------------------------------------
# Error Messages and Solutions
#---------------------------------------------------------------------------

# "Hostname detection did not complete within timeout"
# Solution: Increase global.setup.hostname.max.retries or global.setup.hostname.retry.delay.ms

# "No STS hosts passed connectivity validation"
# Solution: Check network connectivity or disable validation with global.setup.sts.validation.enabled=false

# "STS: Waiting for hostname detection..."
# Solution: Enable verbose logging and check for network/DNS issues

# "Using fallback hostname to prevent failures"
# Solution: Configure global.setup.hostname.override with correct hostname

#---------------------------------------------------------------------------
# Support and Troubleshooting
#---------------------------------------------------------------------------

# If you experience issues:
# 1. Enable verbose logging: global.setup.logging.verbose=true
# 2. Check JMeter logs for hostname detection messages
# 3. Verify network connectivity to STS hosts
# 4. Test hostname detection manually: hostname command
# 5. Configure manual override if needed: global.setup.hostname.override

# The system is designed to be resilient and will always find a working
# STS configuration, even in adverse conditions. 