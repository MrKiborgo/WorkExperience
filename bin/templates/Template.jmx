<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Template Test Plan">
      <stringProp name="TestPlan.comments">rename to your actual test project, e.g. DAP Test Plan</stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Env Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="V_SCHEME" elementType="Argument">
            <stringProp name="Argument.name">V_SCHEME</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="V_HOST" elementType="Argument">
            <stringProp name="Argument.name">V_HOST</stringProp>
            <stringProp name="Argument.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="V_PORT" elementType="Argument">
            <stringProp name="Argument.name">V_PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testname" elementType="Argument">
            <stringProp name="Argument.name">testname</stringProp>
            <stringProp name="Argument.value">Example Test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="debugSwitch" elementType="Argument">
            <stringProp name="Argument.name">debugSwitch</stringProp>
            <stringProp name="Argument.value">off</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global Debug Header" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Priority" elementType="Header">
            <stringProp name="Header.name">Debug</stringProp>
            <stringProp name="Header.value">${debug_msg}usr:${username}-AID:${app_ID}-PNo:${passport_no}-NID:${national_ID}</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">This can usually be safely passed on in a header as an extra field for debug purposes as a means to trace requests.  Obviously replace the variables with something meaningful for the current context.</stringProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <stringProp name="TestPlan.comments">so you don&apos;t have to specify for each sampler, just do it here...</stringProp>
        <stringProp name="HTTPSampler.domain">${V_HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${V_PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${V_SCHEME}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Group Init" enabled="false">
        <stringProp name="TestPlan.comments">Required for the start of each thread group</stringProp>
      </TestFragmentController>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - group init" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}group_init.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">//please ensure scripts are in the scripts folder i.e. scripts/common/group init.groovy</stringProp>
          <stringProp name="TestPlan.comments">Group initialisation script</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Example Script 1" enabled="false">
        <stringProp name="TestPlan.comments">Example script for debug - can be deleted or replaced</stringProp>
      </TestFragmentController>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy Example Project Script" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">Whatever you need!</stringProp>
          <stringProp name="filename">${__P(P_SCRIPTS)}example.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">/**
 * STS (Simple Table Server) utility script for JMeter
 * 
 * Usage:
 * Enter values in the &quot;Parameters&quot; field of the JSR223 element:
 *   KEEP,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   DEL,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   ADDFIRST,applications.csv,value1,value2,value3
 *   or
 *   ADDLAST,applications.csv,value1,value2,value3
 * 
 * Format for READ operations:
 *   action,filename,var1,var2,...,varN
 * 
 * Format for ADD operations:
 *   ADDFIRST/ADDLAST,filename,value1,value2,...,valueN
 * 
 * Where:
 *   - action: KEEP, DEL, ADDFIRST, or ADDLAST
 *   - filename: The name of the CSV file in STS
 *   - For KEEP/DEL: var1,var2,...,varN are variable names to store the CSV columns
 *   - For ADDFIRST/ADDLAST: value1,value2,...,valueN are values to add as a new row
 * 
 * The script will:
 *   - For KEEP/DEL: Read the first row and store in variables
 *   - For ADDFIRST: Add a new row to the beginning of the file
 *   - For ADDLAST: Add a new row to the end of the file
 */</stringProp>
          <stringProp name="TestPlan.comments">Save project specific scripts in the /scripts/project/ folder

Access via ${__P(P_SCRIPTS)}/filename.groovy
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="STS Data" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy STS KEEP" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">KEEP,application_ID.csv,DFT_PEX,DFT_PPT</stringProp>
            <stringProp name="filename">${__P(C_SCRIPTS)}STS.groovy</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">/**
 * STS (Simple Table Server) utility script for JMeter
 * 
 * Usage:
 * Enter values in the &quot;Parameters&quot; field of the JSR223 element:
 *   KEEP,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   DEL,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   ADDFIRST,applications.csv,value1,value2,value3
 *   or
 *   ADDLAST,applications.csv,value1,value2,value3
 * 
 * Format for READ operations:
 *   action,filename,var1,var2,...,varN
 * 
 * Format for ADD operations:
 *   ADDFIRST/ADDLAST,filename,value1,value2,...,valueN
 * 
 * Where:
 *   - action: KEEP, DEL, ADDFIRST, or ADDLAST
 *   - filename: The name of the CSV file in STS
 *   - For KEEP/DEL: var1,var2,...,varN are variable names to store the CSV columns
 *   - For ADDFIRST/ADDLAST: value1,value2,...,valueN are values to add as a new row
 * 
 * The script will:
 *   - For KEEP/DEL: Read the first row and store in variables
 *   - For ADDFIRST: Add a new row to the beginning of the file
 *   - For ADDLAST: Add a new row to the end of the file
 */</stringProp>
            <stringProp name="TestPlan.comments">
- INPUT:  KEEP, Filename, Variable/s

- BEHAVIOUR:  Moves first row to end of file.
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy STS DEL" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">DEL,DFT_PEX.csv,DEBUG_STS_DEL_PEX,DEBUG_STS_DEL_PPT,DEBUG_STS_DEL_TYPE</stringProp>
            <stringProp name="filename">${__P(C_SCRIPTS)}STS.groovy</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">/**
 * STS (Simple Table Server) utility script for JMeter
 * 
 * Usage:
 * Enter values in the &quot;Parameters&quot; field of the JSR223 element:
 *   KEEP,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   DEL,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   ADDFIRST,applications.csv,value1,value2,value3
 *   or
 *   ADDLAST,applications.csv,value1,value2,value3
 * 
 * Format for READ operations:
 *   action,filename,var1,var2,...,varN
 * 
 * Format for ADD operations:
 *   ADDFIRST/ADDLAST,filename,value1,value2,...,valueN
 * 
 * Where:
 *   - action: KEEP, DEL, ADDFIRST, or ADDLAST
 *   - filename: The name of the CSV file in STS
 *   - For KEEP/DEL: var1,var2,...,varN are variable names to store the CSV columns
 *   - For ADDFIRST/ADDLAST: value1,value2,...,valueN are values to add as a new row
 * 
 * The script will:
 *   - For KEEP/DEL: Read the first row and store in variables
 *   - For ADDFIRST: Add a new row to the beginning of the file
 *   - For ADDLAST: Add a new row to the end of the file
 */</stringProp>
            <stringProp name="TestPlan.comments">
- INPUT:  DEL, Filename, Variable/s

- BEHAVIOUR:  Deletes first row of file
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy STS ADD FIRST" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">ADDFIRST,OIX_PEX.csv,DEBUG_STS_ADD_FIRST_ONE,DEBUG_STS_ADD_FIRST_TWO</stringProp>
            <stringProp name="filename">${__P(C_SCRIPTS)}STS.groovy</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">/**
 * STS (Simple Table Server) utility script for JMeter
 * 
 * Usage:
 * Enter values in the &quot;Parameters&quot; field of the JSR223 element:
 *   KEEP,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   DEL,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   ADDFIRST,applications.csv,value1,value2,value3
 *   or
 *   ADDLAST,applications.csv,value1,value2,value3
 * 
 * Format for READ operations:
 *   action,filename,var1,var2,...,varN
 * 
 * Format for ADD operations:
 *   ADDFIRST/ADDLAST,filename,value1,value2,...,valueN
 * 
 * Where:
 *   - action: KEEP, DEL, ADDFIRST, or ADDLAST
 *   - filename: The name of the CSV file in STS
 *   - For KEEP/DEL: var1,var2,...,varN are variable names to store the CSV columns
 *   - For ADDFIRST/ADDLAST: value1,value2,...,valueN are values to add as a new row
 * 
 * The script will:
 *   - For KEEP/DEL: Read the first row and store in variables
 *   - For ADDFIRST: Add a new row to the beginning of the file
 *   - For ADDLAST: Add a new row to the end of the file
 */</stringProp>
            <stringProp name="TestPlan.comments">
- INPUT:  ADDFIRST, Filename, Value/s to add (CSV)

- BEHAVIOUR:  Inserts row at top of file.
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy STS ADD LAST" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">ADDLAST,OIX_PEX.csv,DEBUG_STS_ADD_LAST_ONE,DEBUG_STS_ADD_LAST_TWO</stringProp>
            <stringProp name="filename">${__P(C_SCRIPTS)}STS.groovy</stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">/**
 * STS (Simple Table Server) utility script for JMeter
 * 
 * Usage:
 * Enter values in the &quot;Parameters&quot; field of the JSR223 element:
 *   KEEP,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   DEL,applications.csv,APP_ID,Passport_Number,Name
 *   or
 *   ADDFIRST,applications.csv,value1,value2,value3
 *   or
 *   ADDLAST,applications.csv,value1,value2,value3
 * 
 * Format for READ operations:
 *   action,filename,var1,var2,...,varN
 * 
 * Format for ADD operations:
 *   ADDFIRST/ADDLAST,filename,value1,value2,...,valueN
 * 
 * Where:
 *   - action: KEEP, DEL, ADDFIRST, or ADDLAST
 *   - filename: The name of the CSV file in STS
 *   - For KEEP/DEL: var1,var2,...,varN are variable names to store the CSV columns
 *   - For ADDFIRST/ADDLAST: value1,value2,...,valueN are values to add as a new row
 * 
 * The script will:
 *   - For KEEP/DEL: Read the first row and store in variables
 *   - For ADDFIRST: Add a new row to the beginning of the file
 *   - For ADDLAST: Add a new row to the end of the file
 */</stringProp>
            <stringProp name="TestPlan.comments">
- INPUT:  ADDLAST, Filename, Value/s to add (CSV)

- BEHAVIOUR:  Inserts row at end of file.
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction 1" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/dap/protocol/openid-connect/auth" enabled="true">
            <stringProp name="TestPlan.comments">for debug to verify CSV data assignment - careful as this could generate load on the DAP endpoint</stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/dap/protocol/openid-connect/auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="access_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">access_type</stringProp>
                  <stringProp name="Argument.value">online</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">frontend</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://dap-frontend-ho-hmpo-msit1-i-cw-bac.np.ebsa.homeoffice.gov.uk/caseworking/oauth/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">email profile openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${DFT_PEX}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0, i</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sudhasVar" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">sudhasVar</stringProp>
              <stringProp name="RegexExtractor.regex">text(.*?)string</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction 2" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/dap/protocol/openid-connect/auth/" enabled="true">
            <stringProp name="TestPlan.comments">for debug to verify CSV data assignment - careful as this could generate load on the DAP endpoint</stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/dap/protocol/openid-connect/auth/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="access_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">access_type</stringProp>
                  <stringProp name="Argument.value">online</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">frontend</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://dap-frontend-ho-hmpo-msit1-i-cw-bac.np.ebsa.homeoffice.gov.uk/caseworking/oauth/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">email profile openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${sudhasVar}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0, i</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction 3" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/dap/protocol/openid-connect/auth" enabled="true">
            <stringProp name="TestPlan.comments">for debug to verify CSV data assignment - careful as this could generate load on the DAP endpoint</stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/dap/protocol/openid-connect/auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="access_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">access_type</stringProp>
                  <stringProp name="Argument.value">online</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">frontend</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://dap-frontend-ho-hmpo-msit1-i-cw-bac.np.ebsa.homeoffice.gov.uk/caseworking/oauth/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">email profile openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">27b3d5e3-b920-45fc-ad3c-af8f3e0a28d0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0, i</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction 404" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/404error/" enabled="true">
            <stringProp name="TestPlan.comments">for debug to verify CSV data assignment - careful as this could generate load on the DAP endpoint</stringProp>
            <stringProp name="HTTPSampler.path">/404error/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="access_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">access_type</stringProp>
                  <stringProp name="Argument.value">online</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">frontend</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://dap-frontend-ho-hmpo-msit1-i-cw-bac.np.ebsa.homeoffice.gov.uk/caseworking/oauth/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">email profile openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">27b3d5e3-b920-45fc-ad3c-af8f3e0a28d0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0, i</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert response code 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DEBUG-STSKEEP-${DEBUG_STS_KEEP}_STSDEL-${DEBUG_STS_DEL_PEX}_${DEBUG_STS_DEL_PPT}_${DEBUG_STS_DEL_TYPE}" enabled="false">
          <stringProp name="TestPlan.comments">for debug to verify CSV data assignment - careful as this could generate load on the DAP endpoint</stringProp>
          <stringProp name="HTTPSampler.path">/auth/realms/dap/protocol/openid-connect/auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="access_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">access_type</stringProp>
                <stringProp name="Argument.value">online</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
                <stringProp name="Argument.value">frontend</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="redirect_uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">redirect_uri</stringProp>
                <stringProp name="Argument.value">https://dap-frontend-ho-hmpo-msit1-i-cw-bac.np.ebsa.homeoffice.gov.uk/caseworking/oauth/callback</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="response_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">response_type</stringProp>
                <stringProp name="Argument.value">code</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
                <stringProp name="Argument.value">email profile openid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="state" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">state</stringProp>
                <stringProp name="Argument.value">27b3d5e3-b920-45fc-ad3c-af8f3e0a28d0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">keycloak-dev.np.ebsa.homeoffice.gov.uk</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-GB,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">none</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Priority" elementType="Header">
                <stringProp name="Header.name">Priority</stringProp>
                <stringProp name="Header.value">u=0, i</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If - Debug" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;debugSwitch&quot;) == &quot;on&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="/Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">true</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While - example" enabled="false">
          <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;example_var&quot;) != &quot;READY&quot; &amp;&amp; vars.get(&quot;counter&quot;).toInteger() &lt;= vars.get(&quot;max_count&quot;).toInteger() &amp;&amp; vars.get(&quot;http_code&quot;) == &quot;200&quot;)}
</stringProp>
          <stringProp name="TestPlan.comments">groovy can be used for more complex conditions in while or IF controllers</stringProp>
        </WhileController>
        <hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="/WS.2.5a WebSocket Single Read Sampler" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="dataType">Any</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">${socket_read_timeout}</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="TestPlan.comments">example - kept mainly for the JSON and groovy extractors - See DFT test plan for working example of Websocket protocol</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <eu.luminis.jmeter.wssampler.PingFrameFilter guiclass="eu.luminis.jmeter.wssampler.PingFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.PingFrameFilter" testname="WebSocket Ping/Pong Frame Filter" enabled="true">
              <boolProp name="replyToPing">false</boolProp>
              <stringProp name="filterType">FilterAll</stringProp>
            </eu.luminis.jmeter.wssampler.PingFrameFilter>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON EXTRACTOR" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">docs_status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.tasks[1].status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="TestPlan.comments">IF data is returned in JSON format then try to use JSON extractors if possible as they are usually more reliable than string regex.</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="groovy - variables EG" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">def currentCount = vars.get(&quot;counter&quot;).toInteger()
vars.put(&quot;counter&quot;, (currentCount + 1).toString())
vars.put(&quot;http_code&quot;,prev.getResponseCode())</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Group End" enabled="false">
        <stringProp name="TestPlan.comments">Required for the end of each thread group</stringProp>
      </TestFragmentController>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - group end" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}group_end.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">//please ensure scripts are in the scripts folder i.e. scripts/common/group_end.groovy

</stringProp>
          <stringProp name="TestPlan.comments">Group end script.

Enter desired pacing in seconds in &quot;Parameters&quot; field below.</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setup - required" enabled="true">
        <stringProp name="TestPlan.comments">Test initialisation routines, please keep enabled.

Runs once BEFORE thread groups start.</stringProp>
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - global setup" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename">${__groovy(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}/scripts/common/global_setup.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script"></stringProp>
          <stringProp name="TestPlan.comments">prepare properties and files</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Group 1" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - pacing" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">20</stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}pacing.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">/*
 * Pacing script for JMeter
 * 
 * Usage:
 * Enter value(s) in the &quot;Parameters&quot; field of the JSR223 element:
 * 
 * Single value:
 *   75     -&gt; Sets pacing to exactly 75 seconds
 * 
 * Range:
 *   60,80  -&gt; Sets pacing to random value between 60-80 seconds (inclusive)
 *            e.g. could be 60, 73, 80, etc.
 * 
 * The script will:
 * - Handle single values directly
 * - For ranges, generate a random integer between min and max (inclusive)
 * - Auto-correct if min/max are reversed
 * - Store result in ${pacing} variable for use in the &quot;End&quot; module (scripts/group_end.groovy)
 */</stringProp>
          <stringProp name="TestPlan.comments">set pacing in seconds in &quot;Parameters&quot; field below</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group Init" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="-1078466991">Group Init</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Script 1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="289946706">Example Script 1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group End" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="519396218">Group End</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Debug Group 2">
        <intProp name="ThreadGroup.num_threads">6</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - pacing" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">20</stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}pacing.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">/*
 * Pacing script for JMeter
 * 
 * Usage:
 * Enter value(s) in the &quot;Parameters&quot; field of the JSR223 element:
 * 
 * Single value:
 *   75     -&gt; Sets pacing to exactly 75 seconds
 * 
 * Range:
 *   60,80  -&gt; Sets pacing to random value between 60-80 seconds (inclusive)
 *            e.g. could be 60, 73, 80, etc.
 * 
 * The script will:
 * - Handle single values directly
 * - For ranges, generate a random integer between min and max (inclusive)
 * - Auto-correct if min/max are reversed
 * - Store result in ${pacing} variable for use in the &quot;End&quot; module (scripts/group_end.groovy)
 */</stringProp>
          <stringProp name="TestPlan.comments">set pacing in seconds in &quot;Parameters&quot; field below</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group Init" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="-1078466991">Group Init</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Script 2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="289946706">Example Script 1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group End" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="519396218">Group End</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="UTG Group 1" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="74753804">
            <stringProp name="56">8</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1572771">3600</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">Load distribution across injectors only works for Ultimate Thread Groups at the moment.

Remember thread group names must match values in the CSV Files variables.</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - pacing" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">5</stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}pacing.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">/*
 * Pacing script for JMeter
 * 
 * Usage:
 * Enter value(s) in the &quot;Parameters&quot; field of the JSR223 element:
 * 
 * Single value:
 *   75     -&gt; Sets pacing to exactly 75 seconds
 * 
 * Range:
 *   60,80  -&gt; Sets pacing to random value between 60-80 seconds (inclusive)
 *            e.g. could be 60, 73, 80, etc.
 * 
 * The script will:
 * - Handle single values directly
 * - For ranges, generate a random integer between min and max (inclusive)
 * - Auto-correct if min/max are reversed
 * - Store result in ${pacing} variable for use in the &quot;End&quot; module (scripts/group_end.groovy)
 */</stringProp>
          <stringProp name="TestPlan.comments">set pacing in seconds in &quot;Parameters&quot; field below</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group Init" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="-1078466991">Group Init</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Script 1" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="289946706">Example Script 1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group End" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="519396218">Group End</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="UTG Group 2" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="4566208">
            <stringProp name="54">6</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1572771">3600</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">Load distribution across injectors only works for Ultimate Thread Groups at the moment.

Remember thread group names must match values in the CSV Files variables.</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="/groovy - pacing" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">10</stringProp>
          <stringProp name="filename">${__P(C_SCRIPTS)}pacing.groovy</stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">/*
 * Pacing script for JMeter
 * 
 * Usage:
 * Enter value(s) in the &quot;Parameters&quot; field of the JSR223 element:
 * 
 * Single value:
 *   75     -&gt; Sets pacing to exactly 75 seconds
 * 
 * Range:
 *   60,80  -&gt; Sets pacing to random value between 60-80 seconds (inclusive)
 *            e.g. could be 60, 73, 80, etc.
 * 
 * The script will:
 * - Handle single values directly
 * - For ranges, generate a random integer between min and max (inclusive)
 * - Auto-correct if min/max are reversed
 * - Store result in ${pacing} variable for use in the &quot;End&quot; module (scripts/group_end.groovy)
 */</stringProp>
          <stringProp name="TestPlan.comments">set pacing in seconds in &quot;Parameters&quot; field below</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group Init" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="-1078466991">Group Init</stringProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required at the start of each thread group to initialise data</stringProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Script 2" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="289946706">Example Script 1</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Group End" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1219342833">Template Test Plan</stringProp>
            <stringProp name="519396218">Group End</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Analysis" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/davidcampbell/Downloads/test-results(45).jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/davidcampbell/Downloads/test-results(25).jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.SynthesisReportGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Synthesis Report (filtered)" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/davidcampbell/Downloads/test-results(6).jtl</stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">true</boolProp>
          <boolProp name="saveHeaders">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/davidcampbell/Downloads/test-results(51).jtl</stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/davidcampbell/Documents/JMeter_Files/JMeter_Template/jmtemplate-2025-01-31-094535/test-results.jtl</stringProp>
          <longProp name="interval_grouping">100</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <com.github.johrstrom.config.PrometheusMetricsConfig guiclass="com.github.johrstrom.config.gui.PrometheusMetricsConfigGui" testclass="com.github.johrstrom.config.PrometheusMetricsConfig" testname="Prometheus Metrics" enabled="true">
          <collectionProp name="prometheus.collector_definitions">
            <elementProp name="" elementType="com.github.johrstrom.collector.BaseCollectorConfig">
              <stringProp name="collector.help">default help string</stringProp>
              <stringProp name="collector.metric_name">jmeter_autogenerated_metric_wDXd8alA</stringProp>
              <stringProp name="collector.type">COUNTER</stringProp>
              <collectionProp name="collector.labels"/>
              <stringProp name="collector.quantiles_or_buckets"></stringProp>
            </elementProp>
            <elementProp name="" elementType="com.github.johrstrom.collector.BaseCollectorConfig">
              <stringProp name="collector.help">default help string</stringProp>
              <stringProp name="collector.metric_name">jmeter_autogenerated_metric_NrfS1XAL</stringProp>
              <stringProp name="collector.type">COUNTER</stringProp>
              <collectionProp name="collector.labels"/>
              <stringProp name="collector.quantiles_or_buckets"></stringProp>
            </elementProp>
          </collectionProp>
        </com.github.johrstrom.config.PrometheusMetricsConfig>
        <hashTree/>
      </hashTree>
      <com.github.johrstrom.listener.PrometheusListener guiclass="com.github.johrstrom.listener.gui.PrometheusListenerGui" testclass="com.github.johrstrom.listener.PrometheusListener" testname="Prometheus Listener" enabled="true">
        <collectionProp name="prometheus.collector_definitions">
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_response_time</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.99,0.1|1.00,0.00</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
            <stringProp name="listener.collector.measuring">ResponseTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_response_time_histogram</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">10,25,50,100,200,300,400,500,750,1000,1500,2000,3000,5000,10000,15000,20000,30000,45000,60000,90000,120000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseTime</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_latency</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.99,0.1|1.00,0.00</stringProp>
            <stringProp name="listener.collector.measuring">Latency</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_latency_histogram</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">10,25,50,100,200,300,400,500,750,1000,1500,2000,3000,5000,10000,15000,20000,30000,45000,60000,90000,120000</stringProp>
            <stringProp name="listener.collector.measuring">Latency</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_idle_time</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.99,0.1|1.00,0.00</stringProp>
            <stringProp name="listener.collector.measuring">IdleTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_idle_time_histogram</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">10,25,50,100,200,300,400,500,750,1000,1500,2000,3000,5000,10000,15000,20000,30000,45000,60000,90000,120000</stringProp>
            <stringProp name="listener.collector.measuring">IdleTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_connect_time</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.95,0.1|0.99,0.1|1.00,0.00</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
            <stringProp name="listener.collector.measuring">ConnectTime</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_connect_time_histogram</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">10,25,50,100,200,300,400,500,750,1000,1500,2000,3000,5000,10000,15000,20000,30000,45000,60000,90000,120000</stringProp>
            <stringProp name="listener.collector.measuring">ConnectTime</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_count_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">CountTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_failure_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">FailureTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_success_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessTotal</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_success_ratio</stringProp>
            <stringProp name="collector.type">SUCCESS_RATIO</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.measuring">SuccessRatio</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_assertions_total</stringProp>
            <stringProp name="collector.type">COUNTER</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets"></stringProp>
            <stringProp name="listener.collector.listen_to">assertions</stringProp>
            <stringProp name="listener.collector.measuring">CountTotal</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_size</stringProp>
            <stringProp name="collector.type">SUMMARY</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">0.75,0.5|0.95,0.1|0.99,0.01</stringProp>
            <stringProp name="listener.collector.measuring">ResponseSize</stringProp>
            <stringProp name="listener.collector.listen_to">samples</stringProp>
          </elementProp>
          <elementProp name="" elementType="com.github.johrstrom.listener.ListenerCollectorConfig">
            <stringProp name="collector.help">default help string</stringProp>
            <stringProp name="collector.metric_name">jmeter_size_histogram</stringProp>
            <stringProp name="collector.type">HISTOGRAM</stringProp>
            <collectionProp name="collector.labels">
              <stringProp name="102727412">label</stringProp>
              <stringProp name="-1146018275">testname</stringProp>
              <stringProp name="3059181">code</stringProp>
              <stringProp name="1053258144">thread_group_name</stringProp>
            </collectionProp>
            <stringProp name="collector.quantiles_or_buckets">10,25,50,100,200,300,400,500,750,1000,1500,2000,3000,5000,10000,15000,20000,30000,45000,60000,90000,120000</stringProp>
            <stringProp name="listener.collector.measuring">ResponseSize</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">set up all possible metric options, may want to feed in additional labels also.</stringProp>
      </com.github.johrstrom.listener.PrometheusListener>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
